<?php

module_load_include('inc', 'gcweather', 'gcweather_cache');
global $language;
/**
 * Implements hook_block_info().
 */
function gcweather_block_info() {
	$blocks['gcweather'] = array (
		'info' => t('Weather'),
		'cache' => DRUPAL_NO_CACHE,
	);
	return $blocks;
}

function gcweather_settings($key, $value = NULL) {
	$storage = &drupal_static(__FUNCTION__, NULL);
	
	if(isset($value)) {
		$storage[$key] = $value;
	}
	
	return $storage[$key];
}

function gcweather_location_set($value) {
	// validate format
	user_cookie_save(array('gcweather_location_code' => $value));
	gcweather_settings('location_code', $value);
}

function gcweather_location_get() {
	if(isset($_COOKIE['Drupal_visitor_gcweather_location_code'])) {
		// validate format or return default
		return $_COOKIE['Drupal_visitor_gcweather_location_code'];
	} else {
		return gcweather_settings('default_location');
	}
}

function gcweather_init() {
	global $language;
	$lang = "e";
	if($language->language == 'fr') {
		$lang = "f";
	}
	
	gcweather_settings('default_location','ON,s0000430');
	gcweather_settings('cities_list_file','siteList.xml');
	gcweather_settings('lang',$lang);
	gcweather_settings('location_code',gcweather_location_get());
	gcweather_settings('cache_path', 'public://gcweather_cache/');
	gcweather_settings('provinces', gcweather_get_provinces());
	gcweather_settings('cities', gcweather_get_cities());
	
	// drupal_get_messages('status');
	
}

function gcweather_form($form, &$form_state) {
	$province_list = _gcweather_get_provinces_options();
	
	$location = explode(",",gcweather_settings('location_code'));
	
	$selected = isset($form_state['values']['select_province']) ? $form_state['values']['select_province'] : $location[0];
	
	$form['select_province'] = array(
		'#type' => 'select',
		'#title' => 'Province',
		'#options' => $province_list,
		'#default_value' => $selected,
		'#ajax' => array(
			'callback' => 'gcweather_province_callback',
			'wrapper' => 'cities-select-replace',
		),
	);
	
	$form['select_city'] = array(
		'#type' => 'select',
		'#title' => t('City'), //$province_list[$selected] . ' ' . t('City'),
		'#prefix' => '<div id="cities-select-replace">',
		'#suffix' => '</div>',
		'#options' => _gcweather_get_cities_options($selected),
		'#default_value' => isset($form_state['values']['select_city']) ? $form_state['values']['select_city'] : $location[1],
	);
	
	$form['submit'] = array(
 		'#type' => 'submit',
 		'#value' => t('Submit'),
 		'#ajax' => array(
			'callback' => 'gcweather_ajax_callback',
			'wrapper' => 'gcweather-widget'
		),
 	);
  
	return $form;
}

function gcweather_province_callback($form, $form_state) {
	return $form['select_city'];
}

function gcweather_get_provinces() {
	global $language;
	/*$cities_xml = gcweather_get_cities_file();
	
	$provinces = array_unique($cities_xml->xpath("/siteList/site/provinceCode"), SORT_STRING);
	
	$aprovinces = array();
	foreach($provinces as $province) {
		$aprovinces[(string)$province] = (string) $province;
	}*/
	$engprovinces = array("AB" => "Alberta", "BC" => "British Columbia", "MB" => "Manitoba", "NB" => "New Brunswick", "NL" => "Newfoundland and Labrador", "NT" => "Northwest Territories", "NS" => "Nova Scotia", "NU" => "Nunavut", "ON" => "Ontario", "PE" => "Prince Edward Island", "QC" => "Quebec", "SK" => "Saskatchewan", "YT" => "Yukon");
	$fraprovinces = array("AB" => "Alberta", "BC" => "Colombie-Britannique", "PE" => "Île-du-Prince-Édouard", "MB" => "Manitoba", "NB" => "Nouveau-Brunswick", "NS" => "Nouvelle-Écosse", "NU" => "Nunavut", "ON" => "Ontario", "QC" => "Québec", "SK" => "Saskatchewan", "NL" => "Terre-Neuve-et-Labrador", "NT" => "Territoires du Nord-Ouest", "YT" => "Yukon");
	
	if ($language->language == 'en') {
		return $engprovinces;
	} else {
		return $fraprovinces;
	}
}

function gcweather_get_cities() {
	$cities_xml = gcweather_get_cities_file();	
		
	$provinces = array_unique($cities_xml->xpath("/siteList/site/provinceCode"));
	
	$aprovinces = array();
	
	foreach($provinces as $province) {

		$cities = $cities_xml->xpath("/siteList/site[contains(provinceCode,'$province')]");
		$acities = array();
		$aprovinces[(string) $province] = array();
		foreach($cities as $city) {
			// array_push($aprovinces[(string) $province], array((string) $city->attributes()->code => (string) $city->nameEn));
			$aprovinces[(string) $province][(string) $city->attributes()->code] = (string) $city->nameEn; 
		}
		asort($aprovinces[(string) $province]);
	}
	
	return $aprovinces;
}

function _gcweather_get_provinces_options() {
  // drupal_map_assoc() just makes an array('String' => 'String'...).
  return gcweather_settings('provinces');
}

function _gcweather_get_cities_options($key = '') {
  $options = gcweather_settings('cities');
  
  if (isset($options[$key])) {
    return $options[$key];
  }
  else {
    return array();
  }
}

function gcweather_menu() {
	$items['gcweather/cities'] = array(
		'page callback' => '_gcweather_autocomplete',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK
	);
	
	$items['gcweather/contents'] = array(
		'page callback' => 'gcweather_renderme',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK
	);
	return $items;
}

function _gcweather_autocomplete($string) {
	$cities_xml = gcweather_get_cities_file();
	
	$upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	$lower = "abcdefghijklmnopqrstuvwxyz";
	
	$matches = array();
	
	if(gcweather_settings('lang') == 'e') {
		$name = 'nameEn';
	} else {
		$name = 'nameFr';
	}
	
	$cities_search = $cities_xml->xpath("/siteList/site[contains(translate($name, '$upper', '$lower'),translate(\"$string\",'$upper','$lower'))]");
	
	foreach($cities_search AS $city) {
		$matches[$city[0]->provinceCode . ',' . $city[0]->attributes()->code] = (string) $city[0]->$name;
	}
	
	drupal_json_output($matches);
}

function gcweather_ajax_callback($form, $form_state) {
	// $city = $form_state['triggering_element']['#value'];
	$province = $form_state['values']['select_province'];
	$city = $form_state['values']['select_city'];
	// dpm($city);
	// drupal_static_reset('gcweather_settings');
	gcweather_location_set($province . ',' . $city);
	
	return gcweather_contents();
}

function gcweather_contents() {
	// dpm(gcweather_settings('location_code'));
	global $language;	
	$content = "";
	
	if($weather_xml = gcweather_get_weather_file()) {
		$content = "<div id=\"gcweather-widget\">";
		$content .= "<div class='ssc-block'><h2>" . t('Weather') . "</h2>";
		
		// $xml = simplexml_load_file("http://dd.weatheroffice.ec.gc.ca/citypage_weather/xml/$province/$citycode" . "_" . "$lang.xml");
		$current = $weather_xml->currentConditions;
		// $tmpatt = $current->temperature->attributes();
		$forecasts = $weather_xml->forecastGroup;
		$content .= "<div class='container'><span id='gcweather-settings'><span class='wb-invisible'>" . t("Showing weather for:") . "</span><strong> " . $weather_xml->location->region . " </strong><span class='wb-invisible'>" . t("Select to change location.") . "</span></span><ul><li id='frst'>";
		if($current->iconCode != '') {
			$content .= "<img src='/sites/all/modules/gcweather/weathericons/" . $current->iconCode . ".gif' alt='' />";
		}
		
		$content .= "<span class='description'>";
		$content .= "<strong>" . t("Current Conditions") . "</strong><br>";
		if ($current->condition != '') {			
			$content .= $current->condition . "<br>";
		}
		
		if ($current->temperature != '' && $current->temperature->attributes()->units != '') {
			$content .= t("Temperature: ") . $current->temperature . "&deg;" . $current->temperature->attributes()->units . "</span>"; // $tmpatt["units"] . "<br>";
		}
		$content .= "</li>";
		
		// set the date for the day
		//$daysFromNow = 0;
		foreach($forecasts->forecast as $forecast) {						
			
			// Verification of the date
			/*if (!$dayNameVar) {
				$dayNameVar = substr($forecast->period, 0, stripos($forecast->period, ' '));
			}
			
			if ($dayNameVar != substr($forecast->period, 0, stripos($forecast->period, ' '))) {
				$daysFromNow = $daysFromNow + 1;
				$dateVar = date('Y-m-d', strtotime("+" . $daysFromNow . " days"));
			} else {
				$dateVar = date('Y-m-d');
			}*/
			
			// Output of the actual forecast
			$content .= "<li>";
			if ($forecast->abbreviatedForecast->iconCode != '') {
				$content .= "<img src='/sites/all/modules/gcweather/weathericons/" . $forecast->abbreviatedForecast->iconCode . ".gif' alt='' />";
			}
			
			$content .= "<span class='description'>";
			if ($forecast->period != '') {
				$content .= "<strong>" . $forecast->period . "</strong><br>";
			}
			
			if ($forecast->abbreviatedForecast->textSummary != '') {
				$content .= $forecast->abbreviatedForecast->textSummary ."<br>";
			}
			foreach($forecast->temperatures->temperature as $temperature) {
				if ($temperature != '' && $temperature->attributes()->units != '') {
					switch($temperature->attributes()->class) {
						case "low":
							$content .= t('low');
							break;
						case "high":
							$content .= t('high');
							break;
						default:
							$content .= "";
							break;
					}
					$content .= "&nbsp;" . $temperature . "&deg;" . $temperature->attributes()->units . "<br />";
				}
			}
			
			$content .= "</span></li>";
		}
		$content .= "</ul></div>";
		$content .= "<noscript><style type='text/css'>#gcweather-widget .prev, #gcweather-widget .next, #gcweather-form { display: none; }</style></noscript>";
		$content .= "<div class='navigation'><span class='prev'><a href='#'>" . t("Previous") . "</a></span><span class='next'><a href='#'>" . t("Next") . "</a></span></div></div></div>";
		// $content .= "<script>gcweather_init()</script>";
	} else {
		$content = t("The weather service is currently unavailable");
	}
	
	return $content;
}

function gcweather_renderme() {
	drupal_add_js(drupal_get_path('module', 'gcweather') .'/js/gcweather.js');
	$content = gcweather_contents();
	$form = drupal_get_form('gcweather_form');
	$content .= drupal_render($form);
	
	return $content;
}

function gcweather_block_view($delta = '') {
	drupal_add_js(drupal_get_path('module', 'gcweather') .'/js/gcweather.js');
	
	switch($delta){
		case 'gcweather':
			$block['subject'] = ''; //t('Weather');
			if(user_access('access content')) {					
				$block['content'] = gcweather_contents();
				$form = drupal_get_form('gcweather_form');
				$block['content'] .= drupal_render($form);
			}
			
	}
	return $block;
}
